import React, { useState, useEffect, useCallback } from 'react';
import StatusItem from '../components/StatusItem.jsx';
import { postService } from '../services/postService.js';

function StatusFeedList({ newPost, currentUserId, onPostInserted }) { 
    const [posts, setPosts] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [isInitialLoadDone, setIsInitialLoadDone] = useState(false); 

    // üü¢ H√ÄM X·ª¨ L√ù LIKE: C·∫≠p nh·∫≠t m·∫£ng likes d·ª±a tr√™n postId
    const updateLikesInFeed = (postId, newLikes) => {
        setPosts(prevPosts => 
            prevPosts.map(post => 
                post._id === postId ? { ...post, likes: newLikes } : post
            )
        );
    };
    
    // üü¢ H√ÄM X·ª¨ L√ù COMMENT: C·∫≠p nh·∫≠t to√†n b·ªô b√†i vi·∫øt (v√¨ BE tr·∫£ v·ªÅ Post ƒë√£ update)
    const updatePostInFeed = (updatedPost) => {
        setPosts(prevPosts => 
            prevPosts.map(post => 
                post._id === updatedPost._id ? updatedPost : post
            )
        );
    };

    const loadPosts = useCallback(async () => {
        if (isLoading) return;
        
        setIsLoading(true);
        try {
            const data = await postService.getAllPosts(); 
            setPosts(data); 
        } catch (error) {
            console.error("L·ªói t·∫£i b√†i vi·∫øt:", error);
        } finally {
            setIsLoading(false);
            setIsInitialLoadDone(true);
        }
    }, [isLoading]); 

    // T·∫£i b√†i vi·∫øt cho l·∫ßn truy c·∫≠p ƒë·∫ßu ti√™n
    useEffect(() => {
        loadPosts();
    }, [loadPosts]); 

    // X·ª≠ l√Ω b√†i vi·∫øt m·ªõi ƒë∆∞·ª£c t·∫°o
    useEffect(() => {
        if (newPost && newPost._id) {
            setPosts(prevPosts => {
                if (!prevPosts.some(p => p._id === newPost._id)) {
                    return [newPost, ...prevPosts];
                }
                return prevPosts;
            });
            
            if (onPostInserted) {
                onPostInserted(); 
            }
        }
    }, [newPost, onPostInserted]); 

    return (
        <div className="status-feed-list">
            
            {isLoading && !isInitialLoadDone && (
                <div className="text-center p-4"><span className="loading loading-spinner text-primary"></span></div>
            )}
            
            {posts.map(post => (
                <StatusItem 
                    key={post._id} 
                    post={post} 
                    currentUserId={currentUserId}
                    updateLikesInFeed={updateLikesInFeed} 
                    updatePostInFeed={updatePostInFeed}   
                />
            ))}
            
            {/* Logic th√¥ng b√°o h·∫øt b√†i vi·∫øt/tr·ªëng */}
            {isInitialLoadDone && posts.length === 0 && (
                <div className="card card-compact bg-base-200 text-center p-6 my-4">
                    <p className="font-bold text-lg">Ch∆∞a c√≥ b√†i vi·∫øt n√†o</p>
                    <p className="text-sm text-gray-600 mt-1">H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n chia s·∫ª status c·ªßa b·∫°n!</p>
                </div>
            )}
        </div>
    );
}

export default StatusFeedList;